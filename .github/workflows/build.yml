name: Build

on:
  push:
  pull_request:
  #schedule:
  #  - cron: '0 */2 * * *'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      GET_GAUCHE_URL: https://raw.githubusercontent.com/shirok/get-gauche/master
      GAUCHE_TEST_PATH: ../Gauche-tmp-self-host-test/stage2
      TESTLOG_NAME: testlog-linux
      TESTLOG_PATH: testlog-linux
    steps:
    - uses: actions/checkout@v2
    - name: Install Gauche
      run: |
        pwd
        curl -f -o get-gauche.sh $GET_GAUCHE_URL/get-gauche.sh
        chmod +x get-gauche.sh
        ./get-gauche.sh --auto --home
    - name: Add Gauche path
      run: |
        echo "::set-env name=PATH::$HOME/bin:$PATH"
    - name: Run Gauche once
      run: |
        gosh -V
    - name: Install tools
      run: |
        sudo apt-get install libgdbm-dev
    - name: Self-host-test
      run: |
        gcc -v
        ./DIST self-host-test
    - name: Copy testlog
      if: always()
      run: |
        mkdir -p $TESTLOG_PATH/$TESTLOG_NAME
        cp $GAUCHE_TEST_PATH/src/test.log $TESTLOG_PATH/$TESTLOG_NAME
        cp $GAUCHE_TEST_PATH/ext/threads/test.log $TESTLOG_PATH/$TESTLOG_NAME/test-threads.log
    - name: Upload testlog
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.TESTLOG_NAME }}
        path: ${{ env.TESTLOG_PATH }}

  build-osx:
    runs-on: macos-latest
    timeout-minutes: 90
    env:
      GET_GAUCHE_URL: https://raw.githubusercontent.com/shirok/get-gauche/master
      GAUCHE_TEST_PATH: ../Gauche-tmp-self-host-test/stage2
      TESTLOG_NAME: testlog-osx
      TESTLOG_PATH: testlog-osx
    steps:
    - uses: actions/checkout@v2
    - name: Install Gauche
      run: |
        pwd
        curl -f -o get-gauche.sh $GET_GAUCHE_URL/get-gauche.sh
        chmod +x get-gauche.sh
        ./get-gauche.sh --auto --home
    - name: Add Gauche path
      run: |
        echo "::set-env name=PATH::$HOME/bin:$PATH"
    - name: Run Gauche once
      run: |
        gosh -V
    - name: Install tools
      run: |
        brew install automake
    - name: Self-host-test
      run: |
        gcc -v
        ./DIST self-host-test
    - name: Copy testlog
      if: always()
      run: |
        mkdir -p $TESTLOG_PATH/$TESTLOG_NAME
        cp $GAUCHE_TEST_PATH/src/test.log $TESTLOG_PATH/$TESTLOG_NAME
        cp $GAUCHE_TEST_PATH/ext/threads/test.log $TESTLOG_PATH/$TESTLOG_NAME/test-threads.log
    - name: Upload testlog
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.TESTLOG_NAME }}
        path: ${{ env.TESTLOG_PATH }}

  build-windows:
    runs-on: windows-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, i686]
        include:
        - arch: x86_64
          bit: 64
          devtool_path: D:\devtool64
        - arch: i686
          bit: 32
          devtool_path: D:\devtool32
    env:
      MSYSTEM: MINGW${{ matrix.bit }}
      MSYS2_PATH_TYPE: inherit
      MSYS2_PATH_LIST: D:\msys64\mingw${{ matrix.bit }}\bin;D:\msys64\usr\local\bin;D:\msys64\usr\bin;D:\msys64\bin
      MSYS2_TARBALL_URL1: https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.tar.xz
      MSYS2_TARBALL_URL2: http://repo.msys2.org/distrib/x86_64/msys2-base-x86_64-20190524.tar.xz
      MSYS2_TARBALL_URL3: https://sourceforge.net/projects/msys2/files/Base/x86_64/msys2-base-x86_64-20190524.tar.xz
      GAUCHE_VERSION_URL: https://practical-scheme.net/gauche/releases/latest.txt
      GAUCHE_INSTALLER_URL: https://prdownloads.sourceforge.net/gauche
      GAUCHE_PATH: ${{ matrix.devtool_path }}\Gauche\bin
      TESTLOG_NAME: testlog-windows-${{ matrix.arch }}
      TESTLOG_PATH: testlog-windows
    steps:
    - run: git config --global core.autocrlf false
    - uses: actions/checkout@v2
    - name: Install MSYS2
      run: |
        bash -lc @'
          pwd
          curl -f -L -o msys2.tar.xz $MSYS2_TARBALL_URL1 ||
          curl -f    -o msys2.tar.xz $MSYS2_TARBALL_URL2 ||
          curl -f -L -o msys2.tar.xz $MSYS2_TARBALL_URL3
          err1=$?
          #tar xf msys2.tar.xz -C /d/
          7z x msys2.tar.xz -so | 7z x -aoa -si -ttar -oD:
          ls -l /d/
          exit $err1
        '@
    - name: Add MSYS2 path
      run: |
        echo "::set-env name=PATH::$env:MSYS2_PATH_LIST;$env:PATH"
    - name: Run MSYS2 once
      run: |
        bash -lc @'
          pwd
          cd $GITHUB_WORKSPACE
          pwd
          echo $PATH
        '@
    - name: Update MSYS2
      run: |
        bash -lc @'
          pacman --version
          pacman -Syyuu --noconfirm
        '@
    - name: Install MinGW-w64
      run: |
        bash -lc @'
          pacman --version
          pacman -S --noconfirm base-devel &&
          pacman -S --noconfirm mingw${{ matrix.bit }}/mingw-w64-${{ matrix.arch }}-toolchain
        '@
    - name: Install Gauche
      run: |
        bash -lc @'
          cd $GITHUB_WORKSPACE
          GAUCHE_INSTALLER_VERSION=`curl -f $GAUCHE_VERSION_URL`
          echo $GAUCHE_INSTALLER_VERSION
          GAUCHE_INSTALLER=Gauche-mingw-$GAUCHE_INSTALLER_VERSION-${{ matrix.bit }}bit.msi
          echo $GAUCHE_INSTALLER
          curl -f -L -o $GAUCHE_INSTALLER $GAUCHE_INSTALLER_URL/$GAUCHE_INSTALLER
          ls -l
          cmd.exe //c \"start /wait msiexec /a $GAUCHE_INSTALLER /quiet /qn /norestart TARGETDIR=${{ matrix.devtool_path }}\"
        '@
    - name: Add Gauche path
      run: |
        echo "::set-env name=PATH::$env:GAUCHE_PATH;$env:PATH"
    - name: Run Gauche once
      run: |
        bash -lc @'
          where gosh
          gosh -V
        '@
    - name: Install tools
      run: |
        bash -lc @'
          #pacman -S --noconfirm msys/winpty
          #winpty --version
          where openssl
          echo 'Rename unavailable openssl.exe'
          mv /mingw${{ matrix.bit }}/bin/openssl.exe /mingw${{ matrix.bit }}/bin/openssl_NG.exe
          where openssl
          /usr/bin/openssl version
        '@
    - name: Build
      run: |
        bash -lc @'
          cd $GITHUB_WORKSPACE
          gcc -v
          ./DIST gen
          src/mingw-dist.sh
        '@
    - name: Test
      run: |
        bash -lc @'
          cd $GITHUB_WORKSPACE
          make -s check
        '@
    - name: Copy testlog
      if: always()
      run: |
        bash -lc @'
          cd $GITHUB_WORKSPACE
          mkdir -p $TESTLOG_PATH/$TESTLOG_NAME
          cp src/test.log $TESTLOG_PATH/$TESTLOG_NAME
          cp ext/threads/test.log $TESTLOG_PATH/$TESTLOG_NAME/test-threads.log
        '@
    - name: Upload testlog
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.TESTLOG_NAME }}
        path: ${{ env.TESTLOG_PATH }}
    #- name: Upload result
    #  if: always()
    #  uses: actions/upload-artifact@v1
    #  with:
    #    name: Gauche-${{ matrix.arch }}
    #    path: ../Gauche-mingw-dist/Gauche-${{ matrix.arch }}

